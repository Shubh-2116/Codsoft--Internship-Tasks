# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BnrHRUy3UYjyM0PtZ2Azxk5ZP59qSz5t
"""

import pandas as pd

import numpy as np

import seaborn as sns

import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split

from sklearn.preprocessing import LabelEncoder

from sklearn.linear_model import LogisticRegression

from sklearn.tree import DecisionTreeClassifier

from sklearn.ensemble import RandomForestClassifier

from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

from google.colab import files

uploaded = files.upload()

df = pd.read_csv('IRIS.csv')

print("First 5 rows:\n", df.head())

print("\nDataset Info:\n")

print(df.info())

print("\nClass Distribution:\n", df['species'].value_counts())

print("\nMissing Values:\n", df.isnull().sum())

le = LabelEncoder()

df['species'] = le.fit_transform(df['species'])

X = df.drop('species', axis=1)

y = df['species']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression

LogisticRegression(max_iter=200),

DecisionTreeClassifier(random_state=42),

RandomForestClassifier(n_estimators=100, random_state=42)

KNeighborsClassifier(n_neighbors=5)

results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    results[name] = acc

print(f"\nðŸ”¹ {name} Results:")

print(f"Accuracy: {acc:.4f}")

print("Classification Report:\n", classification_report(y_test, y_pred, target_names=le.classes_))

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues',
                xticklabels=le.classes_, yticklabels=le.classes_)

plt.title(f"{name} - Confusion Matrix")

plt.xlabel("Predicted")

plt.ylabel("Actual")

plt.show()

plt.figure(figsize=(8,5))

sns.barplot(x=list(results.keys()), y=list(results.values()), palette="viridis")

plt.title("Model Accuracy Comparison")

plt.ylabel("Accuracy")

plt.ylim(0, 1)

plt.show()